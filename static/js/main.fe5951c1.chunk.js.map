{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","index","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACI,0BAAMC,SAZW,SAAEC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAE7CN,EAAe,OAMf,2BACIO,KAAM,OACNC,MAAUT,EACVU,SApBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,Y,uBCLnBG,EAAO,uCAAG,WAAQC,GAAR,qBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,8DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAERC,QAAQC,IAAIF,GANO,kBAQZA,EAAKG,KAAK,SAAAC,GAAQ,IAAD,EACpB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAG,UAAES,EAAIG,cAAN,aAAE,EAAYC,iBAAiBb,SAZvB,4CAAH,sDCDPc,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOX,EAAU,EAAVA,IAErC,OACI,yBAAKe,UAAU,QACX,yBAAKC,IAAMhB,EAAMiB,IAAMN,IACvB,+BAAKA,EAAL,OCHCO,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECEb,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAsBvC,OAbAC,qBAAU,WAGNzB,EAAQC,GACPyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAIlB,CAACrB,IAEGsB,EDtBmBK,CAAc3B,GAAhCO,EAF6B,EAE7BA,KAF6B,EAEvBc,QAEd,OACI,oCACI,gCAAOrB,EAAP,KACA,yBAAKiB,UAAU,+CAEPV,EAAKG,KAAI,SAAEC,GAAF,OAEL,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACJD,UESlBkB,EArBM,WAAO,IAAD,EAEe3C,mBAAS,CAAC,qBAFzB,mBAEfQ,EAFe,KAEHT,EAFG,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAEA,4BAEQS,EAAWgB,KACP,SAACd,EAAOkC,GAAR,OAAkB,kBAAC,EAAD,CAASF,IAAMhC,EAAQI,SAAWJ,UCZ5EmC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.fe5951c1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const HandleInputChange = ( e ) => {\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    const HandleSubmit = ( e ) => {\r\n        e.preventDefault(); //Para que no refresque la pag al hacerle enter\r\n\r\n        // .trim() --> Elimina los espacios del texto\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( categories => [inputValue, ...categories] )\r\n\r\n            setInputValue( '' )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { HandleSubmit }>\r\n            <input \r\n                type =\"text\"\r\n                value = { inputValue }\r\n                onChange = { HandleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","//Los helpers son funciones que hacen un trabajo específicio, lo procesan, y luego lo devuelven.\r\n\r\n// Devuelve una promesa!!\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=WZmmVEW3O4lcb5k1QjTf7hdJg79Zs3zu`\r\n\r\n    const resp = await fetch( url )\r\n    const { data } = await resp.json()\r\n\r\n    console.log(data)\r\n\r\n    return data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n}\r\n\r\n//const data = fetch( url )\r\n//.then((response) => response.json())\r\n//.then((data) => data)","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className='card'>\r\n            <img src={ url } alt={ title } />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGif'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data, loading } = useFetchGifs( category )\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            <div className='animate__animated animate__fadeIn card-grid'>\r\n                {\r\n                    data.map(( img ) => (\r\n                        // Con {...img} hacemos que lo que tenga la img se mande como props separadas.\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            { ...img } \r\n                        /> \r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// Con este hook, definimos que getGifs() solo se ejecute cuando se renderize \r\n// este componente es renderizado por primera vez a no ser que la categoria cambie.\r\n/* useEffect(() => {\r\n    getGifs( category )\r\n    .then( img => setImages(img) )\r\n}, [category]) */\r\n ","// los hooks empiezan con use....\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n// Este hook tiene estado y dirá a los componentes que lo usen, si algo cambió y deben renderizarse\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Con este hook, definimos que getGifs() solo se ejecute cuando se renderize \r\n    // este componente es renderizado por primera vez a no ser que la categoria cambie.\r\n    useEffect(() => {\r\n        //Aquí es donde haremos la peticion http.\r\n        \r\n        getGifs(category)\r\n        .then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n\r\n    }, [category])\r\n\r\n    return state; // --> { data: [], loading: true}\r\n}","/* rafcp */\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const  [categories, setCategories ] = useState(['Kimetsu no yaiba']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( \r\n                        (value, index) => <GifGrid key={ value } category={ value } />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}